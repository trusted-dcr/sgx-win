
enclave {
    include "msg.h"

    trusted {
		public void set_time(uint64_t ticks);

        public void recv_command_req(command_req_t req);
        public void recv_command_rsp(command_rsp_t rsp);

        public void recv_append_req(append_req_t req);
        public void recv_append_rsp(append_rsp_t rsp);

        public void recv_poll_req(poll_req_t req);
        public void recv_poll_rsp(poll_rsp_t rsp);

        public void recv_election_req(election_req_t req);
        public void recv_election_rsp(election_rsp_t rsp);

        public void recv_log_req(log_req_t req);
        public void recv_log_rsp(log_rsp_t rsp);

		public void configure_enclave(
		 uid_t self_id,
		 [in, count=events_count] uid_t* event_ids, uint32_t events_count,
		 [in, count=excluded_count] uid_t* excluded, uint32_t excluded_count,
		 [in, count=pending_count] uid_t* pending, uint32_t pending_count,
		 [in, count=executed_count] uid_t* executed, uint32_t executed_count,
		 [in, count=conditions_count] uid_t* dcr_conditions_out, [in, count=conditions_count] uid_t* dcr_conditions_in, uint32_t conditions_count,
		 [in, count=milestones_count] uid_t* dcr_milestones_out, [in, count=milestones_count] uid_t* dcr_milestones_in, uint32_t milestones_count,
		 [in, count=includes_count] uid_t* dcr_includes_out, [in, count=includes_count] uid_t* dcr_includes_in, uint32_t includes_count,
		 [in, count=excludes_count] uid_t* dcr_excludes_out, [in, count=excludes_count] uid_t* dcr_excludes_in, uint32_t excludes_count,
		 [in, count=responses_count] uid_t* dcr_responses_out, [in, count=responses_count] uid_t* dcr_responses_in, uint32_t responses_count,
		 [in, count=peer_map_count] uid_t* peer_map_peers, [in, count=peer_map_count] uid_t* peer_map_events, uint32_t peer_map_count);

		 public void execute(uid_t event);
		 public void get_history();

#ifdef SGX_DEBUG
        public command_req_t test_set_mac_command_req(command_req_t req);
        public command_rsp_t test_set_mac_command_rsp(command_rsp_t rsp);

        public append_req_t test_set_mac_append_req(append_req_t req);
        public append_rsp_t test_set_mac_append_rsp(append_rsp_t rsp);

        public poll_req_t test_set_mac_poll_req(poll_req_t req);
        public poll_rsp_t test_set_mac_poll_rsp(poll_rsp_t rsp);

        public election_req_t test_set_mac_election_req(election_req_t req);
        public election_rsp_t test_set_mac_election_rsp(election_rsp_t rsp);

        public log_rsp_t test_set_mac_log_rsp(log_rsp_t rsp);


        public bool test_verify_mac_poll_req(poll_req_t req);

		public void test_execute(uid_t event_id);
		public bool test_is_enabled(uid_t event_id);
		public bool test_is_executed(uid_t event_id);
		public bool test_is_pending(uid_t event_id);
		public bool test_is_excluded(uid_t event_id);

		public uid_t test_leader_of_event(uid_t event_id);
		public uid_t test_event_of_peer(uid_t peer_id);
		public uint32_t test_size_of_event_cluster();

		public bool test_is_leader();
#endif
	};
    untrusted {
		void send_command_req(command_req_t req);
		void send_command_rsp(command_rsp_t rsp);

        void send_append_req(append_req_t req, [in, count=size] entry_t* entries, int size);
        void send_append_rsp(append_rsp_t rsp);

        void send_poll_req(poll_req_t req);
        void send_poll_rsp(poll_rsp_t rsp);

        void send_election_req(election_req_t req);
        void send_election_rsp(election_rsp_t rsp);

        void send_log_req(log_req_t req);
        void send_log_rsp(log_rsp_t rsp, [in, count=size] entry_t* entries, int size);

        void return_history([in, count=entry_length] entry_t* flat_entry_list, uint32_t entry_length,
						  [in, count=id_length]uid_t* event_uids, uint32_t id_length,
						  [in, count=id_length]uint32_t* offset_list);

		void print([in, string] const char* str);
    };
};
