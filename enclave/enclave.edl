enclave {
    include "msg.h"

    trusted {
        public void recv_command_req(command_req_t req);
        public void recv_command_rsp(command_rsp_t rsp);

        public void recv_append_req(append_req_t req);
        public void recv_append_rsp(append_rsp_t rsp);

        public void recv_poll_req(poll_req_t req);
        public void recv_poll_rsp(poll_rsp_t rsp);

        public void recv_election_req(election_req_t req);
        public void recv_election_rsp(election_rsp_t rsp);

		public void timeout();
		public void intialize();
    };

    untrusted {
		void send_command_req(command_req_t req);
		void send_command_rsp(command_rsp_t rsp);

        void send_append_req(append_req_t req, [in, size=size] entry_t* entries, int size);
        void send_append_rsp(append_rsp_t rsp);

        void send_poll_req(poll_req_t req);
        void send_poll_rsp(poll_rsp_t rsp);

        void send_election_req(election_req_t req);
        void send_election_rsp(election_rsp_t rsp);

		void update_timeout();
		bool is_timed_out();
    };
};